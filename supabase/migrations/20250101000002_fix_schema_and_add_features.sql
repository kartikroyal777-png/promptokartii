/*
# [Schema Fix & Feature Enhancement]
This script corrects previous migration errors and adds new features.
It ensures the 'prompts' table has a 'category' column, recreates the 'hero_images' table with a correct structure, and sets up policies for image uploads and management.

## Query Description:
This operation is designed to be safe. It uses "IF NOT EXISTS" to avoid errors on existing columns and cleanly drops and recreates the 'hero_images' table to ensure a correct state. It also seeds the 'hero_images' table with default content. No user data from the 'prompts' table will be lost.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Medium"
- Requires-Backup: false
- Reversible: false

## Structure Details:
- Modifies `prompts` table: Adds `category` column if it doesn't exist.
- Recreates `hero_images` table: Defines columns for `id`, `image_url`, `alt_text`, and `css_class`.
- Affects RLS policies for `hero_images` and `storage.objects`.

## Security Implications:
- RLS Status: Enabled on `hero_images`.
- Policy Changes: Yes. Adds policies for `hero_images` to allow public read and admin full access. Verifies policies for `prompt-images` storage bucket.
- Auth Requirements: Admin access (`kartikroyal777@gmail.com`) is required for modification operations.

## Performance Impact:
- Indexes: Adds a primary key and a unique index on the `hero_images` table.
- Triggers: None.
- Estimated Impact: Low. Affects small, new tables.
*/

-- Step 1: Safely add the 'category' column to the 'prompts' table if it doesn't exist.
-- This fixes the "Could not find the 'category' column" error.
ALTER TABLE public.prompts
ADD COLUMN IF NOT EXISTS category TEXT NOT NULL DEFAULT 'Other';

-- Step 2: Drop the old, potentially malformed 'hero_images' table to ensure a clean slate.
DROP TABLE IF EXISTS public.hero_images;

-- Step 3: Re-create the 'hero_images' table with the correct structure.
-- This fixes the 'column "position" does not exist' error by using 'css_class' instead.
CREATE TABLE public.hero_images (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    image_url TEXT NOT NULL,
    alt_text TEXT,
    css_class TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Step 4: Enable Row Level Security on the new table.
ALTER TABLE public.hero_images ENABLE ROW LEVEL SECURITY;

-- Step 5: Create policies for the 'hero_images' table.
-- Policy for public read access.
CREATE POLICY "Allow public read access to hero images"
ON public.hero_images FOR SELECT
USING (true);

-- Policy for admin full access.
CREATE POLICY "Allow admin full access to hero images"
ON public.hero_images FOR ALL
USING (
    auth.role() = 'authenticated' AND
    (SELECT email FROM auth.users WHERE id = auth.uid()) = 'kartikroyal777@gmail.com'
)
WITH CHECK (
    auth.role() = 'authenticated' AND
    (SELECT email FROM auth.users WHERE id = auth.uid()) = 'kartikroyal777@gmail.com'
);

-- Step 6: Insert the initial set of hero images with the correct structure.
INSERT INTO public.hero_images (css_class, image_url, alt_text) VALUES
('hero-left', 'https://img-wrapper.vercel.app/image?url=https://placehold.co/400x600/38bdf8/ffffff?text=Style', 'AI generated art in a certain style'),
('hero-center', 'https://img-wrapper.vercel.app/image?url=https://placehold.co/600x400/0f172a/ffffff?text=Concept', 'AI generated art with a certain concept'),
('hero-right', 'https://img-wrapper.vercel.app/image?url=https://placehold.co/400x600/e2e8f0/0f172a?text=Art', 'AI generated art piece');

-- Step 7: Define policies for the 'prompt-images' storage bucket.
-- This allows admins to upload images for prompts.

-- Create policy for public read access on prompt images.
CREATE POLICY "Public read access for prompt images"
ON storage.objects FOR SELECT
USING ( bucket_id = 'prompt-images' );

-- Create policy for admin to upload, update, and delete images.
CREATE POLICY "Allow admin full access to prompt images"
ON storage.objects FOR ALL
USING (
    bucket_id = 'prompt-images' AND
    auth.role() = 'authenticated' AND
    (SELECT email FROM auth.users WHERE id = auth.uid()) = 'kartikroyal777@gmail.com'
)
WITH CHECK (
    bucket_id = 'prompt-images' AND
    auth.role() = 'authenticated' AND
    (SELECT email FROM auth.users WHERE id = auth.uid()) = 'kartikroyal777@gmail.com'
);
