/*
          # [Schema Update for New Features]
          This migration script prepares the database for several new features and fixes a column-not-found error. It is designed to be safe to run multiple times.

          ## Query Description: This operation will:
          1.  Create a helper function `is_admin()` to identify the admin user for security policies.
          2.  Safely add the `category` and `image_path` columns to the `prompts` table, fixing the primary error.
          3.  Create a new `hero_images` table to make the homepage hero images editable from the admin panel.
          4.  Set up Row Level Security (RLS) for the new table.
          5.  Create a new 'prompt-images' bucket in Supabase Storage for file uploads.
          6.  Apply RLS policies to the storage bucket, allowing admins to upload and everyone to view.
          
          This script is non-destructive and uses `IF NOT EXISTS` and `ON CONFLICT` to prevent errors on re-runs. No data will be lost.

          ## Metadata:
          - Schema-Category: ["Structural", "Safe"]
          - Impact-Level: ["Low"]
          - Requires-Backup: false
          - Reversible: true
          
          ## Structure Details:
          - Tables Modified: `prompts`
          - Tables Created: `hero_images`
          - Storage Buckets Created: `prompt-images`
          - Functions Created: `is_admin()`
          
          ## Security Implications:
          - RLS Status: Enabled on `hero_images` and `storage.objects`.
          - Policy Changes: Yes, new policies are created for `hero_images` and the `prompt-images` storage bucket.
          - Auth Requirements: Policies rely on the new `is_admin()` function.
          
          ## Performance Impact:
          - Indexes: None added.
          - Triggers: None added.
          - Estimated Impact: Negligible.
          */

-- Create a helper function to check for admin role based on the specific email.
CREATE OR REPLACE FUNCTION is_admin()
RETURNS BOOLEAN AS $$
BEGIN
  RETURN (auth.email() = 'kartikroyal777@gmail.com');
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 1. Fix 'prompts' table and add a path column for storage
-- This query safely adds the 'category' column if it doesn't exist, fixing the "column not found" error.
-- It also adds 'image_path' to better manage storage objects.
ALTER TABLE public.prompts
ADD COLUMN IF NOT EXISTS category TEXT,
ADD COLUMN IF NOT EXISTS image_path TEXT;

-- 2. Create 'hero_images' table for editable hero section
-- This table will store the images for the floating frames on the homepage.
CREATE TABLE IF NOT EXISTS public.hero_images (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    position TEXT NOT NULL UNIQUE, -- 'left', 'center', 'right'
    image_url TEXT NOT NULL,
    alt_text TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 3. Seed 'hero_images' with initial data
-- This ensures the hero section has images on first load.
-- It won't overwrite existing images if you run it again.
INSERT INTO public.hero_images (position, image_url, alt_text) VALUES
('left', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/400x600/38bdf8/ffffff?text=Style', 'AI generated art style'),
('center', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/600x400/0f172a/ffffff?text=Concept', 'AI generated art concept'),
('right', 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/400x600/e2e8f0/0f172a?text=Art', 'AI generated art piece')
ON CONFLICT (position) DO NOTHING;

-- 4. Enable RLS for 'hero_images' table and define policies
ALTER TABLE public.hero_images ENABLE ROW LEVEL SECURITY;

-- Drop existing policies to prevent conflicts during re-runs
DROP POLICY IF EXISTS "Public can read hero images" ON public.hero_images;
DROP POLICY IF EXISTS "Admins can manage hero images" ON public.hero_images;

-- Create new RLS policies for 'hero_images'
CREATE POLICY "Public can read hero images" ON public.hero_images
FOR SELECT USING (true);

CREATE POLICY "Admins can manage hero images" ON public.hero_images
FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- 5. Create Storage Bucket for prompt images
-- This creates a bucket named 'prompt-images' for file uploads.
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES ('prompt-images', 'prompt-images', true, 5242880, ARRAY['image/jpeg', 'image/png', 'image/webp'])
ON CONFLICT (id) DO UPDATE SET
  public = EXCLUDED.public,
  file_size_limit = EXCLUDED.file_size_limit,
  allowed_mime_types = EXCLUDED.allowed_mime_types;

-- 6. Set up Storage RLS Policies
-- Drop existing policies to prevent conflicts.
DROP POLICY IF EXISTS "Public read access for prompt images" ON storage.objects;
DROP POLICY IF EXISTS "Admin can manage prompt images" ON storage.objects;

-- Create new policies for the 'prompt-images' bucket
CREATE POLICY "Public read access for prompt images" ON storage.objects
FOR SELECT
USING ( bucket_id = 'prompt-images' );

CREATE POLICY "Admin can manage prompt images" ON storage.objects
FOR ALL
USING ( bucket_id = 'prompt-images' AND is_admin() )
WITH CHECK ( bucket_id = 'prompt-images' AND is_admin() );
