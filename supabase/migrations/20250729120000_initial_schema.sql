/*
# [Initial Schema Setup for SeedreamPrompts]
This script sets up the initial database structure for the SeedreamPrompts application. It creates the 'prompts' table to store AI image prompts and configures Row Level Security (RLS) to manage data access.

## Query Description: 
This operation is structural and safe. It creates a new table and defines access policies. No existing data will be affected. It is designed to allow public read access to prompts while restricting write operations to authenticated users, which will later be refined to just the admin.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Low"
- Requires-Backup: false
- Reversible: true

## Structure Details:
- **Table Affected:** `public.prompts`
  - **Columns Added:** `id`, `created_at`, `title`, `category`, `image_url`, `prompt_text`, `instructions`, `created_by` (references `auth.users`)

## Security Implications:
- **RLS Status:** Enabled on `public.prompts`.
- **Policy Changes:** 
  - Creates a policy allowing public `SELECT` access to all prompts.
  - Creates a policy allowing authenticated users to `INSERT`, `UPDATE`, and `DELETE` prompts. This will be the foundation for admin-only access.
- **Auth Requirements:** Write operations require an authenticated user session.

## Performance Impact:
- **Indexes:** A primary key index is created on `id`. A foreign key index is created on `created_by`.
- **Triggers:** None.
- **Estimated Impact:** Low. The setup is standard and optimized for the intended query patterns.
*/

-- 1. Create the 'prompts' table
CREATE TABLE public.prompts (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    title text NOT NULL,
    category text NOT NULL,
    image_url text NOT NULL,
    prompt_text text NOT NULL,
    instructions text,
    created_by uuid REFERENCES auth.users(id) DEFAULT auth.uid()
);

-- 2. Enable Row Level Security (RLS) on the 'prompts' table
ALTER TABLE public.prompts ENABLE ROW LEVEL SECURITY;

-- 3. Create policies for the 'prompts' table
--    - Allow public read access to everyone
CREATE POLICY "Allow public read access" ON public.prompts
    FOR SELECT USING (true);

--    - Allow admin users (all authenticated users for now) to perform all actions
CREATE POLICY "Allow full access for authenticated users" ON public.prompts
    FOR ALL USING (auth.role() = 'authenticated') WITH CHECK (auth.role() = 'authenticated');

-- 4. Set up real-time publications for the 'prompts' table
--    This allows the app to listen for changes to the prompts data.
ALTER PUBLICATION supabase_realtime ADD TABLE public.prompts;
