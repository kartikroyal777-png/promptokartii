/*
# [Feature] Create Claims and Coupon System
This migration introduces the necessary tables and functions to support daily link claims and a new coupon code redemption system.

## Query Description: 
- Creates `daily_link_claims` to track daily rewards from clicking links, fixing the "relation does not exist" error.
- Creates `coupon_codes` to store predefined coupon codes and their credit values.
- Creates `user_coupon_claims` to track which user has redeemed which coupon, preventing duplicate claims.
- Creates a function `claim_coupon_reward` to handle the logic of redeeming a coupon.
- Updates the function `claim_link_reward` to use the new `daily_link_claims` table and award 1 credit.
This is a structural change and adds new features. No existing data is at risk.

## Metadata:
- Schema-Category: ["Structural", "Data"]
- Impact-Level: ["Low"]
- Requires-Backup: false
- Reversible: true

## Structure Details:
- Tables Created: `daily_link_claims`, `coupon_codes`, `user_coupon_claims`
- Functions Created: `claim_coupon_reward`
- Functions Modified: `claim_link_reward`

## Security Implications:
- RLS Status: Enabled on all new tables.
- Policy Changes: Yes, new policies are added for the created tables to ensure users can only access and manage their own data.
- Auth Requirements: All functions require an authenticated user.

## Performance Impact:
- Indexes: Primary keys and foreign keys are indexed.
- Triggers: None.
- Estimated Impact: Low. The new tables are small and queries are efficient.
*/

-- 1. Create daily_link_claims table
CREATE TABLE IF NOT EXISTS public.daily_link_claims (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    link_id integer NOT NULL,
    claim_date date NOT NULL DEFAULT CURRENT_DATE,
    claimed_at timestamp with time zone NOT NULL DEFAULT now(),
    UNIQUE(user_id, link_id, claim_date)
);

-- RLS for daily_link_claims
ALTER TABLE public.daily_link_claims ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own link claims"
ON public.daily_link_claims
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own link claims"
ON public.daily_link_claims
FOR INSERT WITH CHECK (auth.uid() = user_id);

-- 2. Create coupon_codes table
CREATE TABLE IF NOT EXISTS public.coupon_codes (
    code text PRIMARY KEY,
    credits integer NOT NULL,
    is_active boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone NOT NULL DEFAULT now()
);

-- 3. Populate coupon_codes table
INSERT INTO public.coupon_codes (code, credits) VALUES
('KARTIKIQ100', 100),
('KARTIKIQ110', 110),
('KARTIKIQ120', 120),
('KARTIKIQ130', 130),
('KARTIKIQ140', 140),
('KARTIKIQ150', 150),
('KARTIKIQ160', 160),
('KARTIKIQ170', 170),
('KARTIKIQ180', 180),
('KARTIKIQ190', 190),
('KARTIKIQ200', 200)
ON CONFLICT (code) DO NOTHING;

-- 4. Create user_coupon_claims table
CREATE TABLE IF NOT EXISTS public.user_coupon_claims (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    coupon_code text NOT NULL REFERENCES public.coupon_codes(code),
    claimed_at timestamp with time zone NOT NULL DEFAULT now(),
    UNIQUE(user_id, coupon_code)
);

-- RLS for user_coupon_claims
ALTER TABLE public.user_coupon_claims ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own coupon claims"
ON public.user_coupon_claims
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own coupon claims"
ON public.user_coupon_claims
FOR INSERT WITH CHECK (auth.uid() = user_id);


-- 5. Update claim_link_reward function
CREATE OR REPLACE FUNCTION public.claim_link_reward(p_link_id integer)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  current_user_id uuid := auth.uid();
  todays_claim_exists boolean;
BEGIN
  -- Check if user has already claimed this link today
  SELECT EXISTS (
    SELECT 1
    FROM public.daily_link_claims
    WHERE user_id = current_user_id
      AND link_id = p_link_id
      AND claim_date = CURRENT_DATE
  ) INTO todays_claim_exists;

  IF todays_claim_exists THEN
    RAISE EXCEPTION 'This link reward has already been claimed today.';
  END IF;

  -- Insert a new claim record
  INSERT INTO public.daily_link_claims (user_id, link_id)
  VALUES (current_user_id, p_link_id);

  -- Add 1 credit to the user's profile
  UPDATE public.profiles
  SET credits = credits + 1
  WHERE id = current_user_id;
END;
$$;

-- 6. Create claim_coupon_reward function
CREATE OR REPLACE FUNCTION public.claim_coupon_reward(p_coupon_code text)
RETURNS integer
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  current_user_id uuid := auth.uid();
  coupon_record record;
  claim_exists boolean;
BEGIN
  -- Find the coupon
  SELECT *
  INTO coupon_record
  FROM public.coupon_codes
  WHERE code = p_coupon_code AND is_active = true;

  IF NOT FOUND THEN
    RAISE EXCEPTION 'Invalid or inactive coupon code.';
  END IF;

  -- Check if the user has already claimed this coupon
  SELECT EXISTS (
    SELECT 1
    FROM public.user_coupon_claims
    WHERE user_id = current_user_id
      AND coupon_code = p_coupon_code
  ) INTO claim_exists;

  IF claim_exists THEN
    RAISE EXCEPTION 'You have already redeemed this coupon code.';
  END IF;

  -- Insert a new claim record
  INSERT INTO public.user_coupon_claims (user_id, coupon_code)
  VALUES (current_user_id, p_coupon_code);

  -- Add credits to the user's profile
  UPDATE public.profiles
  SET credits = credits + coupon_record.credits
  WHERE id = current_user_id;

  -- Return the number of credits awarded
  RETURN coupon_record.credits;
END;
$$;
