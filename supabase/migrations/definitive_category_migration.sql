/*
# [Operation Name]
Create Relational Categories Schema

## Query Description:
This script transitions the prompt categorization from a simple text field to a robust relational system. It creates a dedicated 'categories' table, migrates existing data, and establishes a foreign key relationship. This change normalizes the database structure, improves data integrity, and resolves the "null value in column 'category_id'" and "ON CONFLICT" errors.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Medium"
- Requires-Backup: true
- Reversible: false (without data loss)

## Structure Details:
- **Creates Table:** `public.categories`
- **Alters Table:** `public.prompts` (adds `category_id`, drops `category`)
- **Constraints Added:** PRIMARY KEY and UNIQUE on `categories`, FOREIGN KEY on `prompts`.

## Security Implications:
- RLS Status: Enabled on the new `categories` table.
- Policy Changes: Yes, new policies are created for `public.categories`.
- Auth Requirements: Admin privileges are required for write operations.

## Performance Impact:
- Indexes: Adds a primary key index on `categories.id` and a foreign key index on `prompts.category_id`.
- Triggers: None.
- Estimated Impact: Positive. Queries filtering by category will be more efficient.
*/

-- 1. Create the categories table with a UNIQUE constraint on the name.
-- This is the key fix for the "ON CONFLICT" error.
CREATE TABLE IF NOT EXISTS public.categories (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL UNIQUE,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- 2. Insert default categories.
-- The "ON CONFLICT (name) DO NOTHING" clause will now work correctly.
INSERT INTO public.categories (name)
VALUES
    ('Men'),
    ('Women'),
    ('Abstract'),
    ('Kids'),
    ('Other')
ON CONFLICT (name) DO NOTHING;

-- 3. Add the category_id column to the prompts table if it doesn't exist.
ALTER TABLE public.prompts
ADD COLUMN IF NOT EXISTS category_id bigint;

-- 4. Add a foreign key constraint if it doesn't exist.
-- We create a named constraint to avoid errors on re-runs.
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_constraint
        WHERE conname = 'prompts_category_id_fkey'
    ) THEN
        ALTER TABLE public.prompts
        ADD CONSTRAINT prompts_category_id_fkey
        FOREIGN KEY (category_id) REFERENCES public.categories(id) ON DELETE SET NULL;
    END IF;
END;
$$;


-- 5. Migrate data from the old 'category' text column to the new 'category_id'.
-- This runs only for prompts that haven't been migrated yet.
DO $$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM information_schema.columns
        WHERE table_name = 'prompts' AND column_name = 'category'
    ) THEN
        UPDATE public.prompts p
        SET category_id = (SELECT c.id FROM public.categories c WHERE c.name = p.category)
        WHERE p.category_id IS NULL;
    END IF;
END;
$$;

-- 6. Drop the old 'category' text column if it exists.
ALTER TABLE public.prompts
DROP COLUMN IF EXISTS category;

-- 7. Now that data is migrated, enforce the NOT NULL constraint on category_id.
ALTER TABLE public.prompts
ALTER COLUMN category_id SET NOT NULL;

-- 8. Enable RLS on the new categories table.
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;

-- 9. Create policies for the categories table.
DROP POLICY IF EXISTS "Public can read categories" ON public.categories;
CREATE POLICY "Public can read categories"
ON public.categories FOR SELECT
USING (true);

DROP POLICY IF EXISTS "Admins can manage categories" ON public.categories;
CREATE POLICY "Admins can manage categories"
ON public.categories FOR ALL
USING (auth.email() = 'kartikroyal777@gmail.com')
WITH CHECK (auth.email() = 'kartikroyal777@gmail.com');
